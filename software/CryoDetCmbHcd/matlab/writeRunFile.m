function writeRunFile(rootPath,runFileName)
    %%
    %% Write config
    % reset config variable
    config0={};

    % Cryo config
    configvars={'digitizerFrequencyMHz', ...
                'channelFrequencyMHz', ...
                'bandCenterMHz', ...
                'numberChannels', ...
                'numberSubBands', ...
                'subBandNo', ...
                'VersionNumber', ...
                'waveformSelect', ...
                'waveformStart', ...
                'rfEnable', ...
                'iqSwapOut', ...
                'iqSwapIn', ...
                'refPhaseDelay', ...
                'toneScale', ...
                'feedbackEnable', ...
                'feedbackPolarity', ...
                'swapDfIQ', ...
                'statusChannelSelect', ...
                'feedbackGain', ...
                'feedbackLimit', ...
                'filterAlpha', ...
                'loopFilterOutputSel', ...
                'analysisScale', ...
                'synthesisScale', ...
                'decimation', ...
                'singleChannelReadout', ...
                'singleChannelReadoutOpt2', ...
                'iqStreamEnable', ...
                'readoutChannelSelect', ...
                'dspReset', ...
                'dspEnable', ...
                'refPhaseDelayFine', ...
                'lmsDelay', ...
                'lmsGain', ...
                'lmsEnable1', ...
                'lmsEnable2', ...
                'lmsEnable3', ...
                'lmsRstDly', ...
                'lmsFreq', ...
                'lmsFreqHz', ...
                'lmsDlyFine', ...
                'lmsDelay2', ...
                'Q', ...
                'I', ...
                'dspCounter', ...
                'loopFilterOutput', ...
               };

    for cfgvar=configvars
        value=lcaGet([rootPath cfgvar{1}]);
        config0.(cfgvar{1})=value;
    end
    
    %
    % Some higher level FPGA config
    configvars={'FpgaVersion', ...
                'UpTime', ...
                'GitHashShort', ...
                'GitHash', ...
                'DeviceDna', ...
                'ImageName', ...
                'BuildEnv', ...
                'BuildServer', ...
                'BuildDate', ...
                'Builder', ...
                };

    for cfgvar=configvars
        % for some reason, this one has a different type than the others.
        if strcmp('FpgaVersion',cfgvar{1})
            value=lcaGet(['mitch_epics:AMCc:FpgaTopLevel:AmcCarrierCore:AxiVersion:' cfgvar{1}]);
        else
            value=char(lcaGet(['mitch_epics:AMCc:FpgaTopLevel:AmcCarrierCore:AxiVersion:' cfgvar{1}]));
        end
        
        % see setEnv.m for what this means
        config0.(cfgvar{1})=value;
    end
    
    config0.CryoChannels={};
    cryoChannelsRootPath=[rootPath, 'CryoChannels:'];
    config0.CryoChannels.centerFrequencyArray = lcaGet( [cryoChannelsRootPath, 'centerFrequencyArray']  );
    config0.CryoChannels.amplitudeScaleArray=lcaGet( [cryoChannelsRootPath, 'amplitudeScaleArray'] );
    config0.CryoChannels.feedbackEnableArray=lcaGet( [cryoChannelsRootPath, 'feedbackEnableArray'] );
    config0.CryoChannels.etaPhaseArray=lcaGet( [cryoChannelsRootPath, 'etaPhaseArray'] );
    config0.CryoChannels.etaMagArray=lcaGet( [cryoChannelsRootPath, 'etaMagArray'] );
    
    % used to only save CryoChannel config if taking single channel data,
    % and only for the channel we were taking data on; now have array reads
    % so can store the entire state
    %% are we in single channel readout mode, and if so, on what channel?
    %singleChannelReadoutOpt2 = lcaGet([rootPath 'singleChannelReadoutOpt2']);
    %readoutChannelSelect = lcaGet([rootPath 'readoutChannelSelect']);
    %
    %% if single channel, save that config info
    %if singleChannelReadoutOpt2==1
    %    singleChanPVprefix = [rootPath, 'CryoChannels:CryoChannel[', num2str(readoutChannelSelect), ']:'];
    %    config0.CryoChannel={};
    %    configvars={'etaMag', ...
    %                'etaPhase', ...
    %                'feedbackEnable', ...
    %                'amplitudeScale', ...
    %                'centerFrequency', ...
    %                'loopFilterOutput', ...
    %                'amplitudeReadback', ...
    %                'frequencyError', ...
    %               };
    %
    %    for cfgvar=configvars
    %        value=lcaGet([singleChanPVprefix cfgvar{1}]);
    %        config0.CryoChannel.(cfgvar{1})=value;
    %    end
    %end

    % save config
    save(runFileName,'-struct','config0');

    %% done writing config
end